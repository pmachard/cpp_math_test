// cpp_math_test.cpp : main project file.
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string>
#include "../../cpp_unit_test/UnitTest.h"
#include "../../cpp_math_lib/IntVector3D.h"
using namespace prj::math;
using namespace prj::unit_test;

class TestIntVector3D : public UnitTest
{
public :

	TestIntVector3D() : UnitTest("TestIntVector3D")
	{
	}
	
	void TestConstructors(void)
	{
		BEGIN_UNIT_TEST("TestConstructors")
		
		IntVector3D * pv3;
		IntVector3D v1;
		IntVector3D v2(1, 2,3);
		pv3 = new IntVector3D(v2);
		
		Check(v1.GetX() == 0 && v1.GetY() == 0 && v1.GetZ() == 0,"Error in the default constuctor");
		Check(v2.GetY() == 1 && v2.GetY() == 2 && v2.GetZ() == 3, "Error in the constructor with 2 parameter");
		Check(pv3->GetX() == 1 && pv3->GetY() == 2 && pv3->GetZ() == 3, "Error in the constuctor with copy parameter");
		END_UNIT_TEST("TestConstructors")
	}
	
	void TestOperatorAffectation(void)
	{
		BEGIN_UNIT_TEST("TestOperatorAffectation")
		
		IntVector3D v1(1, 2, 3);
		IntVector3D v2,v3;
		v3 = v2 = v1;
		
		Check(v2.GetX() == v1.GetX() && v2.GetY() == v1.GetY() && v2.GetZ() == v1.GetZ(), "Error in affection operator");
		Check(v3.GetX() == v1.GetX() && v3.GetY() == v1.GetY() && v3.GetZ() == v1.GetZ(), "Error in affection operator");
		
		END_UNIT_TEST("TestOperatorAffectation")
	}
	
	void TestAbs(void)
	{
		BEGIN_UNIT_TEST("TestABs")
		
		IntVector3D v1(-1, -2,-3);
		IntVector3D v2 = v1.abs();
		
		CheckEqual(v2.GetX(),-v1.GetX(), "Error in affection Abs function");
		CheckEqual(v2.GetY(),-v1.GetY(), "Error in affection Abs function");
		CheckEqual(v2.GetZ(),-v1.GetZ(), "Error in affection Abs function");
		
		END_UNIT_TEST("TestABs")
	}
	
	void TestOperatorAdd(void)
	{
		BEGIN_UNIT_TEST("TestOperatorAdd")
		
		IntVector3D v1(1, -2, 25);
		IntVector3D v2(7, 0, 15);
		IntVector3D v3 = v1 + v2;
		IntVector3D v4 = v1;
		v4+=v2;
		
		CheckEqual(v3.GetX(), v1.GetX() + v2.GetX() , "Error in additional operator");
		CheckEqual(v3.GetY(), v1.GetY() + v2.GetY() , "Error in additional operator");
		CheckEqual(v3.GetZ(), v1.GetZ() + v2.GetZ() , "Error in additional operator");
		CheckEqual(v4.GetX(), v1.GetX() + v2.GetX() , "Error in additional operator");
		CheckEqual(v4.GetY(), v1.GetY() + v2.GetY() , "Error in additional operator");
		CheckEqual(v4.GetZ(), v1.GetZ() + v2.GetZ() , "Error in additional operator");
		
		END_UNIT_TEST("TestOperatorAdd")
	}
	
	void TestOperatorSupp(void)
	{
		BEGIN_UNIT_TEST("TestOperatorSupp")
		
		IntVector3D v1(1, -2, 25);
		IntVector3D v2(7, 33, 15);
		IntVector3D v3 = v1 - v2;
		IntVector3D v4 = v1;
		v4-=v2;
		
		CheckEqual(v3.GetX(), v1.GetX() - v2.GetX() , "Error in diff operator");
		CheckEqual(v3.GetY(), v1.GetY() - v2.GetY() , "Error in diff operator");
		CheckEqual(v3.GetZ(), v1.GetZ() - v2.GetZ() , "Error in diff operator");
		CheckEqual(v4.GetX(), v1.GetX() - v2.GetX() , "Error in diff operator");
		CheckEqual(v4.GetY(), v1.GetY() - v2.GetY() , "Error in diff operator");
		CheckEqual(v4.GetZ(), v1.GetZ() - v2.GetZ() , "Error in diff operator");
		
		END_UNIT_TEST("TestOperatorSupp")
	}
	
	void TestOperatorMult(void)
	{
		BEGIN_UNIT_TEST("TestOperatorMult")
		
		IntVector3D v1(5, -2, 55);
		IntVector3D v2 = v1 * 75;
		IntVector3D v3 = v1;
		v3*=75;
		
		CheckEqual(v2.GetX(), v1.GetX() * 75 , "Error in multiplication operator");
		CheckEqual(v2.GetY(), v1.GetY() * 75 , "Error in multiplication operator");
		CheckEqual(v2.GetZ(), v1.GetZ() * 75 , "Error in multiplication operator");
		CheckEqual(v3.GetX(), v1.GetX() * 75 , "Error in multiplication operator");
		CheckEqual(v3.GetY(), v1.GetY() * 75 , "Error in multiplication operator");
		CheckEqual(v3.GetZ(), v1.GetZ() * 75 , "Error in multiplication operator");
		
		END_UNIT_TEST("TestOperatorMult")
	}
	
	void TestOperatorMultBis(void)
	{
		BEGIN_UNIT_TEST("TestOperatorMultBis")
		
		IntVector3D v1(1, -2, 25);
		IntVector3D v2(7, 33, 15);
		IntVector3D v3 = v1 * v2;
		IntVector3D v4 = v1;
		v4*=v2;
		
		CheckEqual(v3.GetX(), v1.GetX() * v2.GetX() , "Error in multiplication operator");
		CheckEqual(v3.GetY(), v1.GetY() * v2.GetY() , "Error in multiplication operator");
		CheckEqual(v3.GetZ(), v1.GetZ() * v2.GetZ() , "Error in multiplication operator");
		CheckEqual(v4.GetX(), v1.GetX() * v2.GetX() , "Error in multiplication operator");
		CheckEqual(v4.GetY(), v1.GetY() * v2.GetY() , "Error in multiplication operator");
		CheckEqual(v4.GetZ(), v1.GetZ() * v2.GetZ() , "Error in multiplication operator");
		
		END_UNIT_TEST("TestOperatorMultBis")
	}
	
	void TestOperatorDiv(void)
	{
		BEGIN_UNIT_TEST("TestOperatorDiv")
		
		IntVector3D v1(1, -2, 15);
		SimpleVector2D v2 = v1 / 5;
		SimpleVector2D v3 = v1;
		v3/=0.75;
		
		CheckEqual(v2.GetX(), v1.GetX() / 5 , "Error in division operator");
		CheckEqual(v2.GetY(), v1.GetY() / 5 , "Error in division operator");
		CheckEqual(v2.GetZ(), v1.GetZ() / 5 , "Error in division operator");
		CheckEqual(v3.GetX(), v1.GetX() / 5 , "Error in division operator");
		CheckEqual(v3.GetY(), v1.GetY() / 5 , "Error in division operator");
		CheckEqual(v3.GetZ(), v1.GetZ() / 5 , "Error in division operator");
		
		END_UNIT_TEST("TestOperatorDiv")
	}
	
	void TestOperatorEqualDiff(void)
	{
		BEGIN_UNIT_TEST("TestOperatorEqualDiff")
		
		IntVector3D v1(1, -2,15);
		IntVector3D v2(1, -2,15);
		IntVector3D v3(1, 2,15);
		
		Check(v1 == v2 , "Error in division operator");
		Check(v1 != v3 , "Error in division operator");
		
		END_UNIT_TEST("TestOperatorEqualDiff")
	}
	
	void TestOperatorEqualProdScal(void)
	{
		BEGIN_UNIT_TEST("TestOperatorEqualProdScal")
		
		IntVector3D v1(1, -2,15);
		IntVector3D v2(1, 3,15);
		
		double result = v1^v2;
		
		CheckEqual(result,(v1.m_x * v2.m_y) - (v1.m_y * v2.m_x) , "Error in product scalar");
		
		END_UNIT_TEST("TestOperatorEqualProdScal")
	}
	
	void TestMakeVector3D(void)
	{
		BEGIN_UNIT_TEST("TestMakeVector3D")
		IntVector3D v1(1, -2, 3);
		IntVector3D v2 = v1.MakeXYZ();
		Check(result == (v1.GetX() == v2.GetX()) && (v1.GetY() == v2.GetY()) && (v1.GetZ() == v2.GetZ()) , "Error in method MakeXYZ");
		
		v2 = v1.MakeXXX();
		Check(result == (v2.GetX() == v1.GetX()) && (v2.GetY() == v1.GetX()) && (v2.GetZ() == v1.GetX()) , "Error in method MakeXXX");

		v2 = v1.MakeYYY();
		Check(result == (v2.GetX() == v1.GetY()) && (v2.GetY() == v1.GetY()) && (v2.GetZ() == v1.GetY()) , "Error in method MakeYYY");
		
		v2 = v1.MakeZZZ();
		Check(result == (v2.GetX() == v1.GetZ()) && (v2.GetY() == v1.GetZ()) && (v2.GetZ() == v1.GetZ()) , "Error in method MakeZZZ");
		
		v2 = v1.MakeYZX();
		Check(result == (v2.GetX() == v1.GetY()) && (v2.GetY() == v1.GetZ()) && (v2.GetZ() == v1.GetX()) , "Error in method MakeYZX");
		
		v2 = v1.MakeZXY();
		Check(result == (v2.GetX() == v1.GetZ()) && (v2.GetY() == v1.GetX()) && (v2.GetZ() == v1.GetY()) , "Error in method MakeZXY");
		
		v2 = v1.MakeZYX();
		Check(result == (v2.GetX() == v1.GetZ()) && (v2.GetY() == v1.GetY()) && (v2.GetZ() == v1.GetX()) , "Error in method MakeZYX");
		
		END_UNIT_TEST("TestMakeVector3D")
	}	

	void TestMakeVector2D(void)
	{
		BEGIN_UNIT_TEST("TestMakeVector2D")
		IntVector3D v1(1, -2, 3);
		SimpleVector2D v2 = v1.MakeXY();
		Check(result == (v2.GetX() == v1.GetX())) && (v2.GetY() == v1.GetY(), "Error in method MakeXY");
		
		v2 = v1.MakeYX();
		Check(result == (v2.GetX() == v1.GetY()) && (v2.GetY() == v1.GetX(), "Error in method MakeYX");
		
		v2 = v1.MakeXZ();
		Check(result == (v2.GetX() == v1.GetX()) && (v2.GetY() == v1.GetZ(), "Error in method MakeXZ");
		
		v2 = v1.MakeZX();
		Check(result == (v2.GetX() == v1.GetZ()) && (v2.GetY() == v1.GetX(), "Error in method MakeZX");

		v2 = v1.MakeYZ();
		Check(result == (v2.GetX() == v1.GetY()) && (v2.GetY() == v1.GetZ(), "Error in method MakeYZ");
		
		v2 = v1.MakeZY();
		Check(result == (v2.GetX() == v1.GetZ()) && (v2.GetY() == v1.GetY(), "Error in method MakeZY");

		END_UNIT_TEST("TestMakeVector2D")
	}	

	void TestLength(void)
	{
		BEGIN_UNIT_TEST("TestLength")
		IntVector3D v1(2, 3, 5);

		Check(v1.LengthSquared == (v1.GetX()*v1.GetX()+v1.GetY()*v1.GetY()+v1.GetZ()*v1.GetZ()), "Error in method LengthSquared");

		END_UNIT_TEST("TestLength")
	}	
	
	
	void Run()
	{
		TestConstructors();
		TestOperatorAffectation();
		TestAbs();
		TestOperatorAdd();
		TestOperatorSupp();
		TestOperatorMult();
		TestOperatorMultBis();
		TestOperatorDiv();
		TestOperatorEqualProdScal();
		
		TestOperatorEqualDiff();
		TestMakeVector3D();
		TestMakeVector2D();
		
		TestLength();
		
		PrintStat();
	}
};


int main(void)
{
  TestIntVector3D T1;
  T1.Run();
  return 0;
}
Status 
